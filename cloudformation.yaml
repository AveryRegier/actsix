AWSTemplateFormatVersion: '2010-09-09'
Description: Deacon Care System Lambda, API Gateway, and IAM Role

Parameters:
  S3BucketName:
    Type: String
    Default: deacon-care-system
    Description: S3 bucket for Lambda access

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: actsix-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DeaconCareSystemS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ActsixLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: actsix-site-lambda
      Handler: src/lambda.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: site-lambda.zip
      Runtime: nodejs22.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: actsix-site-lambda-api

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ActsixLambda.Arn}/invocations

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ActsixLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
    DependsOn:
      - ProxyMethod

Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod
  LambdaName:
    Description: Lambda function name
    Value: !Ref ActsixLambda
  LambdaRoleArn:
    Description: Lambda IAM Role ARN
    Value: !GetAtt LambdaRole.Arn
